<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ToolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1376, 56</value>
  </metadata>
  <metadata name="ToolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1376, 56</value>
  </metadata>
  <metadata name="ToolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1376, 56</value>
  </metadata>
  <data name="Backgroundbox.ToolTip" xml:space="preserve">
    <value>Multi Threading allows an application to run different bits of code at the same time for multiple Bots.
All this without causing your User Interface to become unresponsive which would happen without it.

There are 3 ways of using multi-threading in VB .NET. 
First by making use of Invoke with delegate most efficient Which this Bot does not offer because I am to dumb to code this.
Second by programming the threads manually with CrossThread Calls which I did.
Third by using Backgroundworkers which this Bot also supports.

Backgroundworker is by far the most stable method but slower than the others.
CrossThreadCalls is the fastest method here but might be not as stable.

If you use only one Account use Backgroundworker.
If you use more than 5 Accounts use CrossThreadCalls.
</value>
  </data>
  <data name="Label3.ToolTip" xml:space="preserve">
    <value>Multi Threading allows an application to run different bits of code at the same time for multiple Bots.
All this without causing your User Interface to become unresponsive which would happen without it.

There are 3 ways of using multi-threading in VB .NET. 
First by making use of Invoke with delegate most efficient Which this Bot does not offer because I am to dumb to code this.
Second by programming the threads manually with CrossThread Calls which I did.
Third by using Backgroundworkers which this Bot also supports.

Backgroundworker is by far the most stable method but slower than the others.
CrossThreadCalls is the fastest method here but might be not as stable.

If you use only one Account use Backgroundworker.
If you use more than 5 Accounts use CrossThreadCalls.</value>
  </data>
  <data name="Crossthreadbox.ToolTip" xml:space="preserve">
    <value>Multi Threading allows an application to run different bits of code at the same time for multiple Bots.
All this without causing your User Interface to become unresponsive which would happen without it.

There are 3 ways of using multi-threading in VB .NET. 
First by making use of Invoke with delegate most efficient Which this Bot does not offer because I am to dumb to code this.
Second by programming the threads manually with CrossThread Calls which I did.
Third by using Backgroundworkers which this Bot also supports.

Backgroundworker is by far the most stable method but slower than the others.
CrossThreadCalls is the fastest method here but might be not as stable.

If you use only one Account use Backgroundworker.
If you use more than 5 Accounts use CrossThreadCalls.
</value>
  </data>
  <data name="Waitbox.ToolTip" xml:space="preserve">
    <value>It will watch the Streamer for X Minutes until it searches a new Stream.

It is recommended not to take a number above 60 minutes.
If a Streamer goes offline it will stick the remaining minutes on the Streamer.
</value>
  </data>
  <data name="Label10.ToolTip" xml:space="preserve">
    <value>It will watch the Streamer for X Minutes until it searches a new Stream.

It is recommended not to take a number above 60 minutes.
If a Streamer goes offline it will stick the remaining minutes on the Streamer.</value>
  </data>
  <data name="Watchstreamer.ToolTip" xml:space="preserve">
    <value>It will search for the Streamer X.
If Streamer X is online and Streams Valorant with Drop enabled it will watch him.

(Only works if the Streamer is in the top 30 Valorant Streams - Sorted by Viewers)</value>
  </data>
  <data name="Streamerinput.ToolTip" xml:space="preserve">
    <value>It will search for the Streamer X.
If Streamer X is online and Streams Valorant with Drop enabled it will watch him.

(Only works if the Streamer is in the top 30 Valorant Streams - Sorted by Viewers)
</value>
  </data>
  <data name="randomstreambox.ToolTip" xml:space="preserve">
    <value>Disabled: It will always watch the Streamer with the most Views on Valorant with Drops enabled every X Minutes.
                 Since most of these Streamers are Streaming for several hours it will often Stay on the Same Streamer.

Enabled: It will always watch the Streamer with the fewest Views on Valorant with Drops enabled every X Minutes.
                This will probably give you a new random Stream on every refresh because of the fewest Views settings.</value>
  </data>
  <data name="tokeninput.ToolTip" xml:space="preserve">
    <value>You can use your Twitch auth-token to login

Tutorial - How to get the Token:
- Use Google Chrome for this
1. Log into your Twitch Account
2. Press F12
3. Open the Tab "Application" if you don't find it search for the &gt;&gt; and click on it
4. Open the "Cookies" drop down
5. Click on the "https://www.twitch.tv" Cookie
6. Use the Filter and search for "auth-token"
7. Copy the numbers and letters in the "Value" field - this is your token
8. Use this token to login with the Twitchbot
</value>
  </data>
  <data name="tokenlogin.ToolTip" xml:space="preserve">
    <value>You can use your Twitch auth-token to login

Tutorial - How to get the Token:
- Use Google Chrome for this
1. Log into your Twitch Account
2. Press F12
3. Open the Tab "Application" if you don't find it search for the &gt;&gt; and click on it
4. Open the "Cookies" drop down
5. Click on the "https://www.twitch.tv" Cookie
6. Use the Filter and search for "auth-token"
7. Copy the numbers and letters in the "Value" field - this is your token
8. Use this token to login with the Twitchbot</value>
  </data>
  <metadata name="Timer3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1198, 56</value>
  </metadata>
  <metadata name="Timer4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>1287, 56</value>
  </metadata>
  <metadata name="Timer5.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>180, 95</value>
  </metadata>
  <metadata name="Timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>269, 95</value>
  </metadata>
  <metadata name="Timer2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>358, 95</value>
  </metadata>
</root>